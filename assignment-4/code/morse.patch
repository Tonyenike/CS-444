--- ledtrig-heartbeat.c	2018-11-08 15:48:12.073613171 -0800
+++ ledtrig-morse.c	2018-11-26 23:03:21.181351659 -0800
@@ -1,10 +1,13 @@
 /*
- * LED Heartbeat Trigger
+ * LED Morse Trigger
  *
- * Copyright (C) 2006 Atsushi Nemoto <anemo@mba.ocn.ne.jp>
+ * Ben Martin and Nickoli Londura
+ * Group 7 
+ * CS 444 - Operating Systems II
+ * Oregon State University
  *
  * Based on Richard Purdie's ledtrig-timer.c and some arch's
- * CONFIG_HEARTBEAT code.
+ * CONFIG_MORSE code.
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License version 2 as
@@ -17,28 +20,253 @@
 #include <linux/slab.h>
 #include <linux/timer.h>
 #include <linux/sched.h>
+#include <linux/cdev.h>
+#include <linux/uaccess.h>
+#include <linux/types.h>
+#include <linux/fs.h>
+#include <linux/device.h>
+#include <linux/version.h>
 #include <linux/sched/loadavg.h>
 #include <linux/leds.h>
 #include <linux/reboot.h>
 #include "../leds.h"
 
-static int panic_heartbeats;
+#define DEFAULT_TICK 250 // Default tick is 250ms
+#define FIRST_MINOR 0
+#define MINOR_CNT 1
+
+static int panic_morses;
+
+char * wordcopy = NULL;
+char ** wordy = &wordcopy;
+int letterplace = 0;
+int morseplace = 0;
+int GEET = 1;
+int newword = 0;
+size_t sss;
 
-struct heartbeat_trig_data {
+struct morse_trig_data {
 	unsigned int phase;
 	unsigned int period;
 	struct timer_list timer;
 	unsigned int invert;
+	long unsigned int blink_tick;
+	unsigned int blink_repeat;
+    char * message;   
 };
 
-static void led_heartbeat_function(unsigned long data)
+
+// This function was found at
+// https://www.geeksforgeeks.org/morse-code-implementation/
+char *  morseEncode(char x) { 
+  switch (x) { 
+  case 'a': 
+  case 'A': 
+    return ".-"; 
+  case 'b': 
+  case 'B': 
+    return "-..."; 
+  case 'c': 
+  case 'C': 
+    return "-.-."; 
+  case 'd': 
+  case 'D': 
+    return "-.."; 
+  case 'e': 
+  case 'E': 
+    return "."; 
+  case 'f': 
+  case 'F': 
+    return "..-."; 
+  case 'g': 
+  case 'G': 
+    return "--."; 
+  case 'h': 
+  case 'H': 
+    return "...."; 
+  case 'i': 
+  case 'I': 
+    return ".."; 
+  case 'j': 
+  case 'J': 
+    return ".---"; 
+  case 'k': 
+  case 'K': 
+    return "-.-"; 
+  case 'l': 
+  case 'L': 
+    return ".-.."; 
+  case 'm': 
+  case 'M': 
+    return "--"; 
+  case 'n': 
+  case 'N': 
+    return "-."; 
+  case 'o': 
+  case 'O': 
+    return "---"; 
+  case 'p': 
+  case 'P': 
+    return ".--."; 
+  case 'q': 
+  case 'Q': 
+    return "--.-"; 
+  case 'r': 
+  case 'R': 
+    return ".-."; 
+  case 's': 
+  case 'S': 
+    return "..."; 
+  case 't': 
+  case 'T': 
+    return "-"; 
+  case 'u': 
+  case 'U': 
+    return "..-"; 
+  case 'v': 
+  case 'V': 
+    return "...-"; 
+  case 'w': 
+  case 'W': 
+    return ".--"; 
+  case 'x': 
+  case 'X': 
+    return "-..-"; 
+  case 'y': 
+  case 'Y': 
+    return "-.--"; 
+  // for space 
+  case 'Z': 
+  case 'z': 
+    return "--.."; 
+  default:
+    return NULL;
+  } 
+} 
+
+ 
+static dev_t dev;
+static struct cdev c_dev;
+static struct class *cl;
+ 
+static int my_open(struct inode *i, struct file *f)
+{
+    printk("CS444 Dummy driver open\r\n");
+    return 0;
+}
+static int my_close(struct inode *i, struct file *f)
+{
+    printk("CS444 Dummy driver close\r\n");
+    return 0;
+}
+
+static ssize_t dummy_read(struct file *file, char __user *buf, size_t size, loff_t *ppos)
+{
+    printk("CS444 Dummy driver read\r\n");
+    return strlen(buf);
+}
+
+static ssize_t dummy_write(struct file *file, const char __user *buf, size_t size, loff_t *ppos)
+{
+
+    // kfree(word);
+    wordcopy = kmalloc(size * sizeof(char), GFP_KERNEL);
+
+    letterplace = 0;
+    morseplace = 0;
+
+    GEET = 1;
+    if (copy_from_user(wordcopy, buf, size))
+        {
+            return -EACCES;
+        }
+
+    printk("%s\n", wordcopy);
+
+    return size;
+}
+ 
+static struct file_operations dummy_fops =
+{
+    .owner = THIS_MODULE,
+    .open = my_open,
+    .read = dummy_read,
+    .write = dummy_write,
+    .release = my_close
+};
+ 
+static int __init dummy_init(void)
+{
+    int ret;
+    struct device *dev_ret;
+ 
+    if ((ret = alloc_chrdev_region(&dev, FIRST_MINOR, MINOR_CNT, "morse")) < 0)
+    {
+        return ret;
+    }
+ 
+    cdev_init(&c_dev, &dummy_fops);
+ 
+    if ((ret = cdev_add(&c_dev, dev, MINOR_CNT)) < 0)
+    {
+        return ret;
+    }
+     
+
+    if (IS_ERR(cl = class_create(THIS_MODULE, "char")))
+    {
+        cdev_del(&c_dev);
+        unregister_chrdev_region(dev, MINOR_CNT);
+        return PTR_ERR(cl);
+    }
+    if (IS_ERR(dev_ret = device_create(cl, NULL, dev, NULL, "morse")))
+    {
+        class_destroy(cl);
+        cdev_del(&c_dev);
+        unregister_chrdev_region(dev, MINOR_CNT);
+        return PTR_ERR(dev_ret);
+    }
+
+    printk("CS444 Dummy Driver has been loaded!\r\n");
+ 
+    return 0;
+}
+ 
+static void __exit dummy_exit(void)
+{
+    device_destroy(cl, dev);
+    class_destroy(cl);
+    cdev_del(&c_dev);
+    unregister_chrdev_region(dev, MINOR_CNT);
+}
+ 
+module_init(dummy_init);
+module_exit(dummy_exit);
+
+
+
+static void led_morse_function(unsigned long data)
 {
 	struct led_classdev *led_cdev = (struct led_classdev *) data;
-	struct heartbeat_trig_data *heartbeat_data = led_cdev->trigger_data;
+	struct morse_trig_data *morse_data = led_cdev->trigger_data;
 	unsigned long brightness = LED_OFF;
 	unsigned long delay = 0;
+    int dot = 0;
+    int space = 0;
+    int i;
+    int j;
+    int spacebar;
+    char * code;
+    char * word;
+
+    printk("%s\n", *wordy);   
+    word = *wordy;
+    if(word == NULL){
+        word = kmalloc(6 * sizeof(char), GFP_KERNEL);   
+        word = "hello\0";
+    } 
 
-	if (unlikely(panic_heartbeats)) {
+	if (unlikely(panic_morses)) {
 		led_set_brightness_nosleep(led_cdev, LED_OFF);
 		return;
 	}
@@ -46,63 +274,139 @@
 	if (test_and_clear_bit(LED_BLINK_BRIGHTNESS_CHANGE, &led_cdev->work_flags))
 		led_cdev->blink_brightness = led_cdev->new_blink_brightness;
 
+
+    // PSUEDOCODE
+    
+    i = letterplace;
+    j = morseplace;    
+
+    spacebar = 0;
+    if((i < strlen(word)  - 1 && (word[i + 1] == '\0' || word[i + 1] == ' ')))
+        spacebar = 1;
+
+
+    code = morseEncode(word[i]);
+
+    if(code[j] == '.')
+        dot = 1;
+
+    if(j == strlen(code) - 1){
+        space = 1;
+    }
+
+
 	/* acts like an actual heart beat -- ie thump-thump-pause... */
-	switch (heartbeat_data->phase) {
+    if(dot){
+	switch (morse_data->phase) {
 	case 0:
 		/*
 		 * The hyperbolic function below modifies the
-		 * heartbeat period length in dependency of the
+		 * morse period length in dependency of the
 		 * current (1min) load. It goes through the points
 		 * f(0)=1260, f(1)=860, f(5)=510, f(inf)->300.
 		 */
-		heartbeat_data->period = 300 +
-			(6720 << FSHIFT) / (5 * avenrun[0] + (7 << FSHIFT));
-		heartbeat_data->period =
-			msecs_to_jiffies(heartbeat_data->period);
-		delay = msecs_to_jiffies(70);
-		heartbeat_data->phase++;
-		if (!heartbeat_data->invert)
+        //printk("Case 0\n");
+        morse_data->period = msecs_to_jiffies(morse_data->blink_tick * 2);
+        if(space && !spacebar)
+            morse_data->period = msecs_to_jiffies(morse_data->blink_tick * 4);
+        else if(space && spacebar)
+            morse_data->period = msecs_to_jiffies(morse_data->blink_tick * 8);
+		delay = msecs_to_jiffies(morse_data->blink_tick);
+		morse_data->phase++;
+		if (!morse_data->invert)
 			brightness = led_cdev->blink_brightness;
 		break;
-	case 1:
-		delay = heartbeat_data->period / 4 - msecs_to_jiffies(70);
-		heartbeat_data->phase++;
-		if (heartbeat_data->invert)
+    default:
+        //printk("Case 1\n");
+		delay = msecs_to_jiffies(morse_data->blink_tick);
+        if(space && !spacebar)
+            delay = msecs_to_jiffies(morse_data->blink_tick * 3);
+        else if(space && spacebar)
+            delay = msecs_to_jiffies(morse_data->blink_tick * 7);
+		morse_data->phase = 0;
+        j++;
+        if(j >= strlen(code)){
+            j = 0;
+            i++;
+        }
+		if (morse_data->invert)
 			brightness = led_cdev->blink_brightness;
 		break;
-	case 2:
-		delay = msecs_to_jiffies(70);
-		heartbeat_data->phase++;
-		if (!heartbeat_data->invert)
+    }
+    }
+    else{
+	switch (morse_data->phase) {
+	case 0:
+        //printk("Case 2\n");
+		// morse_data->period = msecs_to_jiffies(1000);
+        morse_data->period = msecs_to_jiffies(morse_data->blink_tick * 4);
+        if(space && !spacebar)
+            morse_data->period = msecs_to_jiffies(morse_data->blink_tick * 6);
+        else if(space && spacebar)
+            morse_data->period = msecs_to_jiffies(morse_data->blink_tick * 10);
+		delay = msecs_to_jiffies(morse_data->blink_tick * 3);
+		morse_data->phase++;
+		if (!morse_data->invert)
 			brightness = led_cdev->blink_brightness;
 		break;
 	default:
-		delay = heartbeat_data->period - heartbeat_data->period / 4 -
-			msecs_to_jiffies(70);
-		heartbeat_data->phase = 0;
-		if (heartbeat_data->invert)
+        //printk("Case Default\n");
+		delay = msecs_to_jiffies(morse_data->blink_tick);
+        if(space && !spacebar)
+            delay = msecs_to_jiffies(morse_data->blink_tick * 3);
+        else if(space && spacebar)
+            delay = msecs_to_jiffies(morse_data->blink_tick * 7);
+		morse_data->phase = 0;
+        j++;
+        if(j >= strlen(code)){
+            j = 0;
+            i++;
+        }
+		if (morse_data->invert)
 			brightness = led_cdev->blink_brightness;
 		break;
 	}
+    }
+
+    while(word[i] == ' ' || word[i] == '\0'){
+        i++;
+        if(i >= strlen(word)){
+            i = 0;
+            j = 0;
+            GEET = 0;
+        }
+    }
+    if(i >= strlen(word)){
+        i = 0;
+        j = 0;
+        GEET = 0;
+    }
+    
+    letterplace = i;
+    morseplace = j;
+
+
+    if(!GEET && !morse_data->blink_repeat)
+	    brightness = LED_OFF;
 
 	led_set_brightness_nosleep(led_cdev, brightness);
-	mod_timer(&heartbeat_data->timer, jiffies + delay);
+	mod_timer(&morse_data->timer, jiffies + delay);
 }
 
 static ssize_t led_invert_show(struct device *dev,
 		struct device_attribute *attr, char *buf)
 {
 	struct led_classdev *led_cdev = dev_get_drvdata(dev);
-	struct heartbeat_trig_data *heartbeat_data = led_cdev->trigger_data;
+	struct morse_trig_data *morse_data = led_cdev->trigger_data;
 
-	return sprintf(buf, "%u\n", heartbeat_data->invert);
+	return sprintf(buf, "%u\n", morse_data->invert);
 }
 
 static ssize_t led_invert_store(struct device *dev,
 		struct device_attribute *attr, const char *buf, size_t size)
 {
 	struct led_classdev *led_cdev = dev_get_drvdata(dev);
-	struct heartbeat_trig_data *heartbeat_data = led_cdev->trigger_data;
+	struct morse_trig_data *morse_data = led_cdev->trigger_data;
 	unsigned long state;
 	int ret;
 
@@ -110,103 +414,179 @@
 	if (ret)
 		return ret;
 
-	heartbeat_data->invert = !!state;
+	morse_data->invert = !!state;
+
+	return size;
+}
+
+static ssize_t led_tick_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	struct led_classdev *led_cdev = dev_get_drvdata(dev);
+	struct morse_trig_data *morse_data = led_cdev->trigger_data;
+
+	return sprintf(buf, "%lu\n", morse_data->blink_tick);
+}
+
+static ssize_t led_repeat_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	struct led_classdev *led_cdev = dev_get_drvdata(dev);
+	struct morse_trig_data *morse_data = led_cdev->trigger_data;
+
+	return sprintf(buf, "%u\n", morse_data->blink_repeat);
+}
+
+
+static ssize_t led_tick_store(struct device *dev,
+		struct device_attribute *attr, const char *buf, size_t size)
+{
+	struct led_classdev *led_cdev = dev_get_drvdata(dev);
+	struct morse_trig_data *morse_data = led_cdev->trigger_data;
+	unsigned long state;
+	int ret;
+
+	ret = kstrtoul(buf, 0, &state);
+	if (ret)
+		return ret;
+
+	morse_data->blink_tick = state;
+
+	return size;
+}
+
+static ssize_t led_repeat_store(struct device *dev,
+		struct device_attribute *attr, const char *buf, size_t size)
+{
+	struct led_classdev *led_cdev = dev_get_drvdata(dev);
+	struct morse_trig_data *morse_data = led_cdev->trigger_data;
+	unsigned long state;
+	int ret;
+
+	ret = kstrtoul(buf, 0, &state);
+	if (ret)
+		return ret;
+
+	morse_data->blink_repeat = state;
 
 	return size;
 }
 
 static DEVICE_ATTR(invert, 0644, led_invert_show, led_invert_store);
+static DEVICE_ATTR(tick, 0644, led_tick_show, led_tick_store);
+static DEVICE_ATTR(repeat, 0644, led_repeat_show, led_repeat_store);
 
-static void heartbeat_trig_activate(struct led_classdev *led_cdev)
+static void morse_trig_activate(struct led_classdev *led_cdev)
 {
-	struct heartbeat_trig_data *heartbeat_data;
 	int rc;
+    struct morse_trig_data *morse_data;
 
-	heartbeat_data = kzalloc(sizeof(*heartbeat_data), GFP_KERNEL);
-	if (!heartbeat_data)
+	morse_data = kzalloc(sizeof(*morse_data), GFP_KERNEL);
+	if (!morse_data)
 		return;
 
-	led_cdev->trigger_data = heartbeat_data;
+	led_cdev->trigger_data = morse_data;
 	rc = device_create_file(led_cdev->dev, &dev_attr_invert);
 	if (rc) {
 		kfree(led_cdev->trigger_data);
 		return;
 	}
 
-	setup_timer(&heartbeat_data->timer,
-		    led_heartbeat_function, (unsigned long) led_cdev);
-	heartbeat_data->phase = 0;
+
+    
+	rc = device_create_file(led_cdev->dev, &dev_attr_tick);
+	if (rc) {
+		kfree(led_cdev->trigger_data);
+		return;
+	}
+
+	rc = device_create_file(led_cdev->dev, &dev_attr_repeat);
+	if (rc) {
+		kfree(led_cdev->trigger_data);
+		return;
+	}
+
+    morse_data->blink_tick = DEFAULT_TICK;
+    morse_data->blink_repeat = 1;
+    GEET = 1;
+
+	setup_timer(&morse_data->timer,
+		    led_morse_function, (unsigned long) led_cdev);
+	morse_data->phase = 0;
 	if (!led_cdev->blink_brightness)
 		led_cdev->blink_brightness = led_cdev->max_brightness;
-	led_heartbeat_function(heartbeat_data->timer.data);
+	led_morse_function(morse_data->timer.data);
 	set_bit(LED_BLINK_SW, &led_cdev->work_flags);
 	led_cdev->activated = true;
 }
 
-static void heartbeat_trig_deactivate(struct led_classdev *led_cdev)
+static void morse_trig_deactivate(struct led_classdev *led_cdev)
 {
-	struct heartbeat_trig_data *heartbeat_data = led_cdev->trigger_data;
+	struct morse_trig_data *morse_data = led_cdev->trigger_data;
 
 	if (led_cdev->activated) {
-		del_timer_sync(&heartbeat_data->timer);
+		del_timer_sync(&morse_data->timer);
 		device_remove_file(led_cdev->dev, &dev_attr_invert);
-		kfree(heartbeat_data);
+		device_remove_file(led_cdev->dev, &dev_attr_tick);
+		device_remove_file(led_cdev->dev, &dev_attr_repeat);
+		kfree(morse_data);
 		clear_bit(LED_BLINK_SW, &led_cdev->work_flags);
 		led_cdev->activated = false;
 	}
 }
 
-static struct led_trigger heartbeat_led_trigger = {
-	.name     = "heartbeat",
-	.activate = heartbeat_trig_activate,
-	.deactivate = heartbeat_trig_deactivate,
+static struct led_trigger morse_led_trigger = {
+	.name     = "morse",
+	.activate = morse_trig_activate,
+	.deactivate = morse_trig_deactivate,
 };
 
-static int heartbeat_reboot_notifier(struct notifier_block *nb,
+static int morse_reboot_notifier(struct notifier_block *nb,
 				     unsigned long code, void *unused)
 {
-	led_trigger_unregister(&heartbeat_led_trigger);
+	led_trigger_unregister(&morse_led_trigger);
 	return NOTIFY_DONE;
 }
 
-static int heartbeat_panic_notifier(struct notifier_block *nb,
+static int morse_panic_notifier(struct notifier_block *nb,
 				     unsigned long code, void *unused)
 {
-	panic_heartbeats = 1;
+	panic_morses = 1;
 	return NOTIFY_DONE;
 }
 
-static struct notifier_block heartbeat_reboot_nb = {
-	.notifier_call = heartbeat_reboot_notifier,
+static struct notifier_block morse_reboot_nb = {
+	.notifier_call = morse_reboot_notifier,
 };
 
-static struct notifier_block heartbeat_panic_nb = {
-	.notifier_call = heartbeat_panic_notifier,
+static struct notifier_block morse_panic_nb = {
+	.notifier_call = morse_panic_notifier,
 };
 
-static int __init heartbeat_trig_init(void)
+static int __init morse_trig_init(void)
 {
-	int rc = led_trigger_register(&heartbeat_led_trigger);
+	int rc = led_trigger_register(&morse_led_trigger);
 
 	if (!rc) {
 		atomic_notifier_chain_register(&panic_notifier_list,
-					       &heartbeat_panic_nb);
-		register_reboot_notifier(&heartbeat_reboot_nb);
+					       &morse_panic_nb);
+		register_reboot_notifier(&morse_reboot_nb);
 	}
 	return rc;
 }
 
-static void __exit heartbeat_trig_exit(void)
+static void __exit morse_trig_exit(void)
 {
-	unregister_reboot_notifier(&heartbeat_reboot_nb);
+    // kfree(word);
+	unregister_reboot_notifier(&morse_reboot_nb);
 	atomic_notifier_chain_unregister(&panic_notifier_list,
-					 &heartbeat_panic_nb);
-	led_trigger_unregister(&heartbeat_led_trigger);
+					 &morse_panic_nb);
+	led_trigger_unregister(&morse_led_trigger);
 }
 
-module_init(heartbeat_trig_init);
-module_exit(heartbeat_trig_exit);
+module_init(morse_trig_init);
+module_exit(morse_trig_exit);
 
-MODULE_AUTHOR("Atsushi Nemoto <anemo@mba.ocn.ne.jp>");
-MODULE_DESCRIPTION("Heartbeat LED trigger");
+MODULE_AUTHOR("Group 7 CS 444");
+MODULE_DESCRIPTION("Morse LED trigger");
 MODULE_LICENSE("GPL");
