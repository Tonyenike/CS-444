From 4acaa1edf9b1a9bbdea47a2e123836f20e844fd1 Mon Sep 17 00:00:00 2001
From: tonyenike <martinb3@os2.engr.oregonstate.edu>
Date: Mon, 29 Oct 2018 22:59:25 -0700
Subject: [PATCH 1/2] Assignment 2 complete

---
 block/look-iosched.c | 171 +++++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 171 insertions(+)
 create mode 100644 block/look-iosched.c

diff --git a/block/look-iosched.c b/block/look-iosched.c
new file mode 100644
index 0000000..47682d1
--- /dev/null
+++ b/block/look-iosched.c
@@ -0,0 +1,171 @@
+/*
+ * elevator look
+ */
+#include <linux/blkdev.h>
+#include <linux/elevator.h>
+#include <linux/bio.h>
+#include <linux/module.h>
+#include <linux/slab.h>
+#include <linux/init.h>
+
+int diskpos = 1; // Disk position is indicated by the most
+                 // recently fulfilled request.
+
+struct look_data {
+	struct list_head queue;
+};
+
+static void look_merged_requests(struct request_queue *q, struct request *rq,
+				 struct request *next)
+{
+	list_del_init(&next->queuelist);
+    // elv_dispatch_sort(q, next); // Bump up requests.
+}
+
+static int look_dispatch(struct request_queue *q, int force)
+{
+	struct look_data *nd = q->elevator->elevator_data;
+
+	if (!list_empty(&nd->queue)) {
+		struct request *rq;
+		rq = list_entry(nd->queue.next, struct request, queuelist);
+        printk("LOOK: dispatching %llu\n", blk_rq_pos(rq)); // Testing purposes
+        diskpos = blk_rq_pos(rq);
+		list_del_init(&rq->queuelist); // Delete dispatched request.
+		elv_dispatch_sort(q, rq); // Bump up requests.
+		return 1;
+	}
+	return 0;
+}
+/*
+ * Changes are in this function (mostly)!
+ *
+ * This is for adding elements in queue and making sure it is sorted.
+ *
+ */
+
+static void look_add_request(struct request_queue *q, struct request *rq)
+{
+	struct look_data *nd = q->elevator->elevator_data;
+    struct list_head * yeet; // List to iterate through
+    struct request * item_to_yeet; // items in list
+
+
+
+    // If there are other requests in queue ...
+    if(!list_empty(&nd->queue)){
+        printk("LOOK: adding %llu\n", blk_rq_pos(rq)); // Testing purposes
+        // Elevator goes UP from low to high, then jumps back down to low (1-way look)
+        list_for_each(yeet, &nd->queue){
+           // If we haven't found the position yet for rq to add...
+                // Look at request in the yeet and compare it to rq to add
+                item_to_yeet = list_entry(yeet, struct request, queuelist);
+       
+                // If the item index is lower than the disk position 
+                if(blk_rq_pos(rq) < diskpos){
+                    if(blk_rq_pos(item_to_yeet) < diskpos && blk_rq_pos(rq) < blk_rq_pos(item_to_yeet)){
+                            break;
+                    }
+                }
+                else{
+                    if(blk_rq_pos(item_to_yeet) < diskpos || blk_rq_pos(rq) < blk_rq_pos(item_to_yeet)){
+                            break;
+                    }
+                }
+        }
+        //Rq to add is immediately BEFORE item_to_yeet appears
+        list_add_tail(&rq->queuelist, yeet); //Add the item, no more checking
+    }
+
+    // Queue is empty, just add it LUL
+    else{
+        printk("LOOK: add empty %llu\n", blk_rq_pos(rq));
+	    list_add_tail(&rq->queuelist, &nd->queue);
+    }
+}
+
+static struct request *
+look_former_request(struct request_queue *q, struct request *rq)
+{
+	struct look_data *nd = q->elevator->elevator_data;
+
+	if (rq->queuelist.prev == &nd->queue)
+		return NULL;
+	return list_entry(rq->queuelist.prev, struct request, queuelist);
+}
+
+static struct request *
+look_latter_request(struct request_queue *q, struct request *rq)
+{
+	struct look_data *nd = q->elevator->elevator_data;
+
+	if (rq->queuelist.next == &nd->queue)
+		return NULL;
+	return list_entry(rq->queuelist.next, struct request, queuelist);
+}
+
+static int look_init_queue(struct request_queue *q, struct elevator_type *e)
+{
+
+    printk("I'm initing the queue!\n");
+	struct look_data *nd;
+	struct elevator_queue *eq;
+
+	eq = elevator_alloc(q, e);
+	if (!eq)
+		return -ENOMEM;
+
+	nd = kmalloc_node(sizeof(*nd), GFP_KERNEL, q->node);
+	if (!nd) {
+		kobject_put(&eq->kobj);
+		return -ENOMEM;
+	}
+	eq->elevator_data = nd;
+
+	INIT_LIST_HEAD(&nd->queue);
+
+	spin_lock_irq(q->queue_lock);
+	q->elevator = eq;
+	spin_unlock_irq(q->queue_lock);
+	return 0;
+}
+
+static void look_exit_queue(struct elevator_queue *e)
+{
+	struct look_data *nd = e->elevator_data;
+
+	BUG_ON(!list_empty(&nd->queue));
+	kfree(nd);
+}
+
+static struct elevator_type elevator_look = {
+	.ops = {
+		.elevator_merge_req_fn		= look_merged_requests,
+		.elevator_dispatch_fn		= look_dispatch,
+		.elevator_add_req_fn		= look_add_request,
+		.elevator_former_req_fn		= look_former_request,
+		.elevator_latter_req_fn		= look_latter_request,
+		.elevator_init_fn		= look_init_queue,
+		.elevator_exit_fn		= look_exit_queue,
+	},
+	.elevator_name = "look",
+	.elevator_owner = THIS_MODULE,
+};
+
+static int __init look_init(void)
+{
+	return elv_register(&elevator_look);
+}
+
+static void __exit look_exit(void)
+{
+	elv_unregister(&elevator_look);
+}
+
+module_init(look_init);
+module_exit(look_exit);
+
+
+MODULE_AUTHOR("Ben Martin & Nickoli Londura, group 7");
+MODULE_LICENSE("GPL");
+MODULE_DESCRIPTION("Look IO scheduler");
-- 
1.8.3.1

From cc5f18ed15012d3509378b9182f3728428166862 Mon Sep 17 00:00:00 2001
From: tonyenike <martinb3@os2.engr.oregonstate.edu>
Date: Mon, 29 Oct 2018 23:00:15 -0700
Subject: [PATCH 2/2] Another thing

---
 block/Kconfig.iosched | 10 +++++-----
 block/Makefile        |  2 +-
 2 files changed, 6 insertions(+), 6 deletions(-)

diff --git a/block/Kconfig.iosched b/block/Kconfig.iosched
index 421bef9..6f4ccff 100644
--- a/block/Kconfig.iosched
+++ b/block/Kconfig.iosched
@@ -2,11 +2,11 @@ if BLOCK
 
 menu "IO Schedulers"
 
-config IOSCHED_NOOP
+config IOSCHED_LOOK
 	bool
 	default y
 	---help---
-	  The no-op I/O scheduler is a minimal scheduler that does basic merging
+	  The look I/O scheduler is a minimal scheduler that does basic merging
 	  and sorting. Its main uses include non-disk based block devices like
 	  memory devices, and specialised software or hardware environments
 	  that do their own scheduling and require only minimal assistance from
@@ -52,8 +52,8 @@ choice
 	config DEFAULT_CFQ
 		bool "CFQ" if IOSCHED_CFQ=y
 
-	config DEFAULT_NOOP
-		bool "No-op"
+	config DEFAULT_LOOK
+		bool "look"
 
 endchoice
 
@@ -61,7 +61,7 @@ config DEFAULT_IOSCHED
 	string
 	default "deadline" if DEFAULT_DEADLINE
 	default "cfq" if DEFAULT_CFQ
-	default "noop" if DEFAULT_NOOP
+	default "look" if DEFAULT_LOOK
 
 endmenu
 
diff --git a/block/Makefile b/block/Makefile
index 00ecc97..f9be0d2 100644
--- a/block/Makefile
+++ b/block/Makefile
@@ -15,7 +15,7 @@ obj-$(CONFIG_BLK_DEV_BSG)	+= bsg.o
 obj-$(CONFIG_BLK_DEV_BSGLIB)	+= bsg-lib.o
 obj-$(CONFIG_BLK_CGROUP)	+= blk-cgroup.o
 obj-$(CONFIG_BLK_DEV_THROTTLING)	+= blk-throttle.o
-obj-$(CONFIG_IOSCHED_NOOP)	+= noop-iosched.o
+obj-$(CONFIG_IOSCHED_LOOK)	+= look-iosched.o
 obj-$(CONFIG_IOSCHED_DEADLINE)	+= deadline-iosched.o
 obj-$(CONFIG_IOSCHED_CFQ)	+= cfq-iosched.o
 
-- 
1.8.3.1

